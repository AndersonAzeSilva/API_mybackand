// incidentModel.js

const db = require('../config/db'); // Importando a conexão com o banco de dados

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para criar um novo incidente
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.createIncident = async (incidentData) => {
  const { title, description, status, userId } = incidentData;
  
  const sql = 'INSERT INTO incidents (title, description, status, user_id) VALUES (?, ?, ?, ?)';
  const [result] = await db.execute(sql, [title, description, status, userId]);
  
  return { id: result.insertId, title, description, status, userId };
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para obter todos os incidentes
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.getAllIncidents = async () => {
  const sql = 'SELECT * FROM incidents';
  const [rows] = await db.query(sql);
  
  return rows;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para obter um incidente por ID
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.getIncidentById = async (id) => {
  const sql = 'SELECT * FROM incidents WHERE id = ?';
  const [rows] = await db.query(sql, [id]);
  
  return rows[0]; // Retorna o primeiro incidente encontrado
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para atualizar um incidente
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.updateIncident = async (id, incidentData) => {
  const { title, description, status } = incidentData;
  
  const sql = 'UPDATE incidents SET title = ?, description = ?, status = ? WHERE id = ?';
  await db.execute(sql, [title, description, status, id]);
  
  return { id, title, description, status }; // Retorna o incidente atualizado
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Função para deletar um incidente
/////////////////////////////////////////////////////////////////////////////////////////////////////
exports.deleteIncident = async (id) => {
  const sql = 'DELETE FROM incidents WHERE id = ?';
  const [result] = await db.execute(sql, [id]);
  
  return result.affectedRows > 0; // Retorna true se um incidente foi deletado
};

/////////////////////////////////////////////////////////////////////////////////////////////////////